type value = One | Two | Three | Four | Five | Six | Seven | Eight | Nine;
type cell =
  | Empty
  | Value(value);
type row = (cell, cell, cell, cell, cell, cell, cell, cell, cell);
type grid = ( row, row, row, row, row, row, row, row, row );
type position = (int, int);

let values = [ One, Two, Three, Four, Five, Six, Seven, Eight, Nine ];

let initialGrid: grid = (
  ( Value(One)  , Value(Two)  , Value(Three), Value(Four) , Value(Five) , Value(Six)  , Value(Seven), Value(Eight), Value(Nine)  ),
  ( Value(Four) , Value(Five) , Value(Six)  , Value(Seven), Value(Eight), Value(Nine) , Value(One)  , Value(Two)  , Value(Three) ),
  ( Value(Seven), Value(Eight), Value(Nine) , Value(One)  , Value(Two)  , Value(Three), Value(Four) , Value(Five) , Value(Six)   ),
  ( Value(Two)  , Value(Three), Value(Four) , Value(Five) , Value(Six)  , Value(Seven), Value(Eight), Value(Nine) , Value(One)   ),
  ( Value(Five) , Value(Six)  , Value(Seven), Value(Eight), Value(Nine) , Value(One)  , Value(Two)  , Value(Three), Value(Four)  ),
  ( Value(Eight), Value(Nine) , Value(One)  , Value(Two)  , Value(Three), Value(Four) , Value(Five) , Value(Six)  , Value(Seven) ),
  ( Value(Three), Value(Four) , Value(Five) , Value(Six)  , Value(Seven), Value(Eight), Value(Nine) , Value(One)  , Value(Two)   ),
  ( Value(Six)  , Value(Seven), Value(Eight), Value(Nine) , Value(One)  , Value(Two)  , Value(Three), Value(Four) , Value(Five)  ),
  ( Value(Nine) , Value(One)  , Value(Two)  , Value(Three), Value(Four) , Value(Five) , Value(Six)  , Value(Seven), Value(Eight) ),
);

let getCell = (grid: grid, position: (int, int)): cell =>
  switch ((position, grid)) {
  | ((0, 0), ((cell, _, _, _, _, _, _, _, _), _, _, _, _, _, _, _, _)) => cell;
  | ((0, 1), ((_, cell, _, _, _, _, _, _, _), _, _, _, _, _, _, _, _)) => cell;
  | ((0, 2), ((_, _, cell, _, _, _, _, _, _), _, _, _, _, _, _, _, _)) => cell;
  | ((0, 3), ((_, _, _, cell, _, _, _, _, _), _, _, _, _, _, _, _, _)) => cell;
  | ((0, 4), ((_, _, _, _, cell, _, _, _, _), _, _, _, _, _, _, _, _)) => cell;
  | ((0, 5), ((_, _, _, _, _, cell, _, _, _), _, _, _, _, _, _, _, _)) => cell;
  | ((0, 6), ((_, _, _, _, _, _, cell, _, _), _, _, _, _, _, _, _, _)) => cell;
  | ((0, 7), ((_, _, _, _, _, _, _, cell, _), _, _, _, _, _, _, _, _)) => cell;
  | ((0, 8), ((_, _, _, _, _, _, _, _, cell), _, _, _, _, _, _, _, _)) => cell;
  | ((1, 0), (_, (cell, _, _, _, _, _, _, _, _), _, _, _, _, _, _, _)) => cell;
  | ((1, 1), (_, (_, cell, _, _, _, _, _, _, _), _, _, _, _, _, _, _)) => cell;
  | ((1, 2), (_, (_, _, cell, _, _, _, _, _, _), _, _, _, _, _, _, _)) => cell;
  | ((1, 3), (_, (_, _, _, cell, _, _, _, _, _), _, _, _, _, _, _, _)) => cell;
  | ((1, 4), (_, (_, _, _, _, cell, _, _, _, _), _, _, _, _, _, _, _)) => cell;
  | ((1, 5), (_, (_, _, _, _, _, cell, _, _, _), _, _, _, _, _, _, _)) => cell;
  | ((1, 6), (_, (_, _, _, _, _, _, cell, _, _), _, _, _, _, _, _, _)) => cell;
  | ((1, 7), (_, (_, _, _, _, _, _, _, cell, _), _, _, _, _, _, _, _)) => cell;
  | ((1, 8), (_, (_, _, _, _, _, _, _, _, cell), _, _, _, _, _, _, _)) => cell;
  | ((2, 0), (_, _, (cell, _, _, _, _, _, _, _, _), _, _, _, _, _, _)) => cell;
  | ((2, 1), (_, _, (_, cell, _, _, _, _, _, _, _), _, _, _, _, _, _)) => cell;
  | ((2, 2), (_, _, (_, _, cell, _, _, _, _, _, _), _, _, _, _, _, _)) => cell;
  | ((2, 3), (_, _, (_, _, _, cell, _, _, _, _, _), _, _, _, _, _, _)) => cell;
  | ((2, 4), (_, _, (_, _, _, _, cell, _, _, _, _), _, _, _, _, _, _)) => cell;
  | ((2, 5), (_, _, (_, _, _, _, _, cell, _, _, _), _, _, _, _, _, _)) => cell;
  | ((2, 6), (_, _, (_, _, _, _, _, _, cell, _, _), _, _, _, _, _, _)) => cell;
  | ((2, 7), (_, _, (_, _, _, _, _, _, _, cell, _), _, _, _, _, _, _)) => cell;
  | ((2, 8), (_, _, (_, _, _, _, _, _, _, _, cell), _, _, _, _, _, _)) => cell;
  | ((3, 0), (_, _, _, (cell, _, _, _, _, _, _, _, _), _, _, _, _, _)) => cell;
  | ((3, 1), (_, _, _, (_, cell, _, _, _, _, _, _, _), _, _, _, _, _)) => cell;
  | ((3, 2), (_, _, _, (_, _, cell, _, _, _, _, _, _), _, _, _, _, _)) => cell;
  | ((3, 3), (_, _, _, (_, _, _, cell, _, _, _, _, _), _, _, _, _, _)) => cell;
  | ((3, 4), (_, _, _, (_, _, _, _, cell, _, _, _, _), _, _, _, _, _)) => cell;
  | ((3, 5), (_, _, _, (_, _, _, _, _, cell, _, _, _), _, _, _, _, _)) => cell;
  | ((3, 6), (_, _, _, (_, _, _, _, _, _, cell, _, _), _, _, _, _, _)) => cell;
  | ((3, 7), (_, _, _, (_, _, _, _, _, _, _, cell, _), _, _, _, _, _)) => cell;
  | ((3, 8), (_, _, _, (_, _, _, _, _, _, _, _, cell), _, _, _, _, _)) => cell;
  | ((4, 0), (_, _, _, _, (cell, _, _, _, _, _, _, _, _), _, _, _, _)) => cell;
  | ((4, 1), (_, _, _, _, (_, cell, _, _, _, _, _, _, _), _, _, _, _)) => cell;
  | ((4, 2), (_, _, _, _, (_, _, cell, _, _, _, _, _, _), _, _, _, _)) => cell;
  | ((4, 3), (_, _, _, _, (_, _, _, cell, _, _, _, _, _), _, _, _, _)) => cell;
  | ((4, 4), (_, _, _, _, (_, _, _, _, cell, _, _, _, _), _, _, _, _)) => cell;
  | ((4, 5), (_, _, _, _, (_, _, _, _, _, cell, _, _, _), _, _, _, _)) => cell;
  | ((4, 6), (_, _, _, _, (_, _, _, _, _, _, cell, _, _), _, _, _, _)) => cell;
  | ((4, 7), (_, _, _, _, (_, _, _, _, _, _, _, cell, _), _, _, _, _)) => cell;
  | ((4, 8), (_, _, _, _, (_, _, _, _, _, _, _, _, cell), _, _, _, _)) => cell;
  | ((5, 0), (_, _, _, _, _, (cell, _, _, _, _, _, _, _, _), _, _, _)) => cell;
  | ((5, 1), (_, _, _, _, _, (_, cell, _, _, _, _, _, _, _), _, _, _)) => cell;
  | ((5, 2), (_, _, _, _, _, (_, _, cell, _, _, _, _, _, _), _, _, _)) => cell;
  | ((5, 3), (_, _, _, _, _, (_, _, _, cell, _, _, _, _, _), _, _, _)) => cell;
  | ((5, 4), (_, _, _, _, _, (_, _, _, _, cell, _, _, _, _), _, _, _)) => cell;
  | ((5, 5), (_, _, _, _, _, (_, _, _, _, _, cell, _, _, _), _, _, _)) => cell;
  | ((5, 6), (_, _, _, _, _, (_, _, _, _, _, _, cell, _, _), _, _, _)) => cell;
  | ((5, 7), (_, _, _, _, _, (_, _, _, _, _, _, _, cell, _), _, _, _)) => cell;
  | ((5, 8), (_, _, _, _, _, (_, _, _, _, _, _, _, _, cell), _, _, _)) => cell;
  | ((6, 0), (_, _, _, _, _, _, (cell, _, _, _, _, _, _, _, _), _, _)) => cell;
  | ((6, 1), (_, _, _, _, _, _, (_, cell, _, _, _, _, _, _, _), _, _)) => cell;
  | ((6, 2), (_, _, _, _, _, _, (_, _, cell, _, _, _, _, _, _), _, _)) => cell;
  | ((6, 3), (_, _, _, _, _, _, (_, _, _, cell, _, _, _, _, _), _, _)) => cell;
  | ((6, 4), (_, _, _, _, _, _, (_, _, _, _, cell, _, _, _, _), _, _)) => cell;
  | ((6, 5), (_, _, _, _, _, _, (_, _, _, _, _, cell, _, _, _), _, _)) => cell;
  | ((6, 6), (_, _, _, _, _, _, (_, _, _, _, _, _, cell, _, _), _, _)) => cell;
  | ((6, 7), (_, _, _, _, _, _, (_, _, _, _, _, _, _, cell, _), _, _)) => cell;
  | ((6, 8), (_, _, _, _, _, _, (_, _, _, _, _, _, _, _, cell), _, _)) => cell;
  | ((7, 0), (_, _, _, _, _, _, _, (cell, _, _, _, _, _, _, _, _), _)) => cell;
  | ((7, 1), (_, _, _, _, _, _, _, (_, cell, _, _, _, _, _, _, _), _)) => cell;
  | ((7, 2), (_, _, _, _, _, _, _, (_, _, cell, _, _, _, _, _, _), _)) => cell;
  | ((7, 3), (_, _, _, _, _, _, _, (_, _, _, cell, _, _, _, _, _), _)) => cell;
  | ((7, 4), (_, _, _, _, _, _, _, (_, _, _, _, cell, _, _, _, _), _)) => cell;
  | ((7, 5), (_, _, _, _, _, _, _, (_, _, _, _, _, cell, _, _, _), _)) => cell;
  | ((7, 6), (_, _, _, _, _, _, _, (_, _, _, _, _, _, cell, _, _), _)) => cell;
  | ((7, 7), (_, _, _, _, _, _, _, (_, _, _, _, _, _, _, cell, _), _)) => cell;
  | ((7, 8), (_, _, _, _, _, _, _, (_, _, _, _, _, _, _, _, cell), _)) => cell;
  | ((8, 0), (_, _, _, _, _, _, _, _, (cell, _, _, _, _, _, _, _, _))) => cell;
  | ((8, 1), (_, _, _, _, _, _, _, _, (_, cell, _, _, _, _, _, _, _))) => cell;
  | ((8, 2), (_, _, _, _, _, _, _, _, (_, _, cell, _, _, _, _, _, _))) => cell;
  | ((8, 3), (_, _, _, _, _, _, _, _, (_, _, _, cell, _, _, _, _, _))) => cell;
  | ((8, 4), (_, _, _, _, _, _, _, _, (_, _, _, _, cell, _, _, _, _))) => cell;
  | ((8, 5), (_, _, _, _, _, _, _, _, (_, _, _, _, _, cell, _, _, _))) => cell;
  | ((8, 6), (_, _, _, _, _, _, _, _, (_, _, _, _, _, _, cell, _, _))) => cell;
  | ((8, 7), (_, _, _, _, _, _, _, _, (_, _, _, _, _, _, _, cell, _))) => cell;
  | ((8, 8), (_, _, _, _, _, _, _, _, (_, _, _, _, _, _, _, _, cell))) => cell;
  | _ => Empty;
};

let groups: list((position, position, position, position, position, position, position, position, position)) = [
  /* lines */
  ( (0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8) ),
  ( (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8) ),
  ( (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8) ),
  ( (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8) ),
  ( (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8) ),
  ( (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8) ),
  ( (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8) ),
  ( (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8) ),
  ( (8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8) ),
  /* columns */
  ( (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0) ),
  ( (0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1) ),
  ( (0, 2), (1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2), (7, 2), (8, 2) ),
  ( (0, 3), (1, 3), (2, 3), (3, 3), (4, 3), (5, 3), (6, 3), (7, 3), (8, 3) ),
  ( (0, 4), (1, 4), (2, 4), (3, 4), (4, 4), (5, 4), (6, 4), (7, 4), (8, 4) ),
  ( (0, 5), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5), (6, 5), (7, 5), (8, 5) ),
  ( (0, 6), (1, 6), (2, 6), (3, 6), (4, 6), (5, 6), (6, 6), (7, 6), (8, 6) ),
  ( (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7) ),
  ( (0, 8), (1, 8), (2, 8), (3, 8), (4, 8), (5, 8), (6, 8), (7, 8), (8, 8) ),
  /* blocks */
  ( (0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2) ),
  ( (0, 3), (0, 4), (0, 5), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5) ),
  ( (0, 6), (0, 7), (0, 8), (1, 6), (1, 7), (1, 8), (2, 6), (2, 7), (2, 8) ),
  ( (3, 0), (3, 1), (3, 2), (4, 0), (4, 1), (4, 2), (5, 0), (5, 1), (5, 2) ),
  ( (3, 3), (3, 4), (3, 5), (4, 3), (4, 4), (4, 5), (5, 3), (5, 4), (5, 5) ),
  ( (3, 6), (3, 7), (3, 8), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8) ),
  ( (6, 0), (6, 1), (6, 2), (7, 0), (7, 1), (7, 2), (8, 0), (8, 1), (8, 2) ),
  ( (6, 3), (6, 4), (6, 5), (7, 3), (7, 4), (7, 5), (8, 3), (8, 4), (8, 5) ),
  ( (6, 6), (6, 7), (6, 8), (7, 6), (7, 7), (7, 8), (8, 6), (8, 7), (8, 8) ),
];

let getGroup = (grid, group) =>
  group
  |> Utils.map9(getCell(grid));

let getGroups = (grid, groups) =>
  groups
  |> List.map(getGroup(grid));

/* let isComplete = row =>
  row
  |> Utils.sort9
  |> (===) (One, Two, Three, Four, Five, Six, Seven, Eight, Nine); */
