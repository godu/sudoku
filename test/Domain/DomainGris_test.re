open GoduBsAva.Sync;
open DomainCell;
open DomainGrid;

let (_0, _1, _2, _3, _4, _5, _6, _7, _8, _9) = (
  Empty,
  Value(One),
  Value(Two),
  Value(Three),
  Value(Four),
  Value(Five),
  Value(Six),
  Value(Seven),
  Value(Eight),
  Value(Nine),
);

let perfectGrid: t = (
  (_1, _2, _3, _4, _5, _6, _7, _8, _9),
  (_4, _5, _6, _7, _8, _9, _1, _2, _3),
  (_7, _8, _9, _1, _2, _3, _4, _5, _6),
  (_2, _3, _4, _5, _6, _7, _8, _9, _1),
  (_5, _6, _7, _8, _9, _1, _2, _3, _4),
  (_8, _9, _1, _2, _3, _4, _5, _6, _7),
  (_3, _4, _5, _6, _7, _8, _9, _1, _2),
  (_6, _7, _8, _9, _1, _2, _3, _4, _5),
  (_9, _1, _2, _3, _4, _5, _6, _7, _8),
);

let emptyGrid: t = (
  (_0, _0, _0, _0, _0, _0, _0, _0, _0),
  (_0, _0, _0, _0, _0, _0, _0, _0, _0),
  (_0, _0, _0, _0, _0, _0, _0, _0, _0),
  (_0, _0, _0, _0, _0, _0, _0, _0, _0),
  (_0, _0, _0, _0, _0, _0, _0, _0, _0),
  (_0, _0, _0, _0, _0, _0, _0, _0, _0),
  (_0, _0, _0, _0, _0, _0, _0, _0, _0),
  (_0, _0, _0, _0, _0, _0, _0, _0, _0),
  (_0, _0, _0, _0, _0, _0, _0, _0, _0),
);

let ongoingGrid: t = (
  (_1, _2, _3, _4, _5, _6, _7, _8, _9),
  (_4, _5, _0, _7, _8, _9, _1, _2, _3),
  (_7, _0, _9, _1, _2, _3, _4, _5, _6),
  (_2, _3, _0, _5, _6, _0, _8, _9, _1),
  (_5, _6, _7, _8, _9, _1, _2, _3, _4),
  (_8, _9, _1, _2, _3, _4, _5, _6, _7),
  (_3, _4, _5, _6, _7, _9, _0, _1, _2),
  (_6, _0, _8, _9, _1, _2, _3, _4, _5),
  (_9, _1, _2, _3, _4, _5, _6, _0, _8),
);

let failedGrid: t = (
  (_1, _2, _3, _4, _5, _6, _7, _8, _9),
  (_4, _5, _0, _7, _8, _9, _1, _2, _3),
  (_7, _0, _9, _1, _2, _3, _4, _5, _6),
  (_2, _3, _0, _5, _6, _0, _8, _9, _1),
  (_5, _6, _7, _8, _1, _1, _2, _3, _4),
  (_8, _9, _1, _2, _3, _4, _5, _6, _7),
  (_3, _4, _5, _6, _7, _9, _0, _1, _2),
  (_6, _0, _8, _9, _1, _2, _3, _4, _5),
  (_9, _1, _2, _3, _4, _5, _6, _0, _8),
);

test("getCell", t => {
  (0, 0) |> getCell(perfectGrid) |> t.deepEqual(_1);
  (8, 8) |> getCell(perfectGrid) |> t.deepEqual(_8);
  ((-1), (-1)) |> getCell(perfectGrid) |> t.deepEqual(Empty);
  (9, 9) |> getCell(perfectGrid) |> t.deepEqual(Empty);
});

test("isComplete", t => {
  perfectGrid |> isComplete |> t.truthy;
  emptyGrid |> isComplete |> t.falsy;
  ongoingGrid |> isComplete |> t.falsy;
  failedGrid |> isComplete |> t.falsy;
});
